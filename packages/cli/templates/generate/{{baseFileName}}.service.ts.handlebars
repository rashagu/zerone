import { BadRequestException, Injectable } from '@nestjs/common';
import { {{BaseName}}CreateDto, {{BaseName}}ListDto, {{BaseName}}AllDto, {{BaseName}}UpdateDto } from './dto';
import { {{className}} } from './entities/{{baseFileName}}.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
@Injectable()
export class {{BaseName}}Service {
    constructor(@InjectRepository({{className}}) private {{baseName}}Repository: Repository<{{className}}>) {}

    async create(entity: {{BaseName}}CreateDto) {
        return this.{{baseName}}Repository.save(entity);
    }

    findAll(dto: {{BaseName}}AllDto) {
        return this.{{baseName}}Repository.find({
            where: dto.where,
            order: { createdAt: 'DESC' },
        });
    }
    async list(dto: {{BaseName}}ListDto) {
        const { page = 1, psize = 20 } = dto.limit || {};
        const [data, total] = await Promise.all([
            this.{{baseName}}Repository.find({
                where: dto.where,
                order: { createdAt: 'DESC' },
                skip: (page - 1) * psize,
                take: psize,
            }),
            this.{{baseName}}Repository.count({
                where: dto.where,
            }),
        ]);
        return { data, total };
    }
    async findBy{{primaryColumnsProperty.Name}}({{primaryColumnsProperty.name}}: {{primaryColumnsProperty.type.value}}) {
        const entity = await this.{{baseName}}Repository.findOneBy({ {{primaryColumnsProperty.name}} });

        if (!entity) throw new BadRequestException('数据不存在');
        return entity;
    }

    async update({{primaryColumnsProperty.name}}: {{primaryColumnsProperty.type.value}}, update: {{BaseName}}UpdateDto) {
        return this.{{baseName}}Repository.update({{primaryColumnsProperty.name}}, update);
    }
    async delete({{primaryColumnsProperty.name}}: {{primaryColumnsProperty.type.value}}) {
        return this.{{baseName}}Repository.delete({ {{primaryColumnsProperty.name}} });
    }
}
