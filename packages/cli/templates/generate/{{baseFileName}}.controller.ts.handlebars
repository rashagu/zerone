import { Controller, Get, Post, Patch, Body, Param, Delete, Query } from '@nestjs/common';
import { ApiBearerAuth, ApiExtraModels, ApiHeader, ApiOperation, ApiTags } from '@nestjs/swagger';
import { Limit } from '@common/utils/constants';
import { {{BaseName}}CreateDto, {{BaseName}}ListDto, {{BaseName}}AllDto, {{BaseName}}UpdateDto } from './dto';
import { {{BaseName}}Service } from './{{baseFileName}}.service';
import { {{className}} } from './entities/{{baseFileName}}.entity';
import { RDto, RListDto } from '@common/Result.dto';
import { BodyIdsDto } from '@common/BodyIds.dto';
import { ApiROfResponse, ApiRPrimitiveOfResponse } from '@common/ApiROfResponse';

@ApiTags('{{baseName}}')
@ApiBearerAuth()
@ApiExtraModels({{className}})
@ApiHeader({
    name: 'Authorization',
    description: 'Custom token',
})
@Controller()
export class {{BaseName}}Controller {
    constructor(private readonly {{baseName}}Service: {{BaseName}}Service) {}
    /**
     * 新增{{documentation}}
     */
    @ApiOperation({ summary: '新增{{documentation}}' })
    @ApiROfResponse({{className}})
    @Post('/{{baseName}}/create')
    async create(@Body() create{{BaseName}}Dto: {{BaseName}}CreateDto) {
        const data = await this.{{baseName}}Service.create(create{{BaseName}}Dto);
        return new RDto({ data });
    }
    /**
     * {{documentation}}列表（query）
     */
    @ApiOperation({ summary: '{{documentation}}列表（query）' })
    @ApiROfResponse({{className}}, 'array')
    @Post('/{{baseName}}/list')
    async queryList(@Body() dto: {{BaseName}}ListDto) {
        const { data, total } = await this.{{baseName}}Service.list(dto);
        return new RListDto({ data, total });
    }
    /**
     * {{documentation}}列表
     */
    @ApiOperation({ summary: '{{documentation}}列表' })
    @ApiROfResponse({{className}}, 'array')
    @Get('/{{baseName}}/list')
    async list(@Query() limit: Limit) {
        const { data, total } = await this.{{baseName}}Service.list({ limit });
        return new RListDto({ data, total });
    }
    /**
     * {{documentation}}列表-全部
     */
    @ApiOperation({ summary: '{{documentation}}列表-全部' })
    @ApiROfResponse({{className}}, 'array')
    @Get('/{{baseName}}/all')
    async findAll(@Query() dto: {{BaseName}}AllDto) {
        const data = await this.{{baseName}}Service.findAll(dto);
        return new RListDto({ data, total: data.length });
    }
    /**
     * {{documentation}}详情
     */
    @ApiOperation({ summary: '某个{{documentation}}信息' })
    @ApiROfResponse({{className}})
    @Get('/{{baseName}}/details/:{{primaryColumnsProperty.name}}')
    async details(@Param('{{primaryColumnsProperty.name}}') {{primaryColumnsProperty.name}}: {{primaryColumnsProperty.type.value}}) {
        const data = await this.{{baseName}}Service.findBy{{primaryColumnsProperty.Name}}({{primaryColumnsProperty.name}});
        return new RDto({ data });
    }
    /**
     * 修改{{documentation}}
     */
    @ApiOperation({ summary: '修改{{documentation}}信息' })
    @ApiRPrimitiveOfResponse()
    @Patch('/{{baseName}}/update/:{{primaryColumnsProperty.name}}')
    async update(@Param('{{primaryColumnsProperty.name}}') {{primaryColumnsProperty.name}}: {{primaryColumnsProperty.type.value}}, @Body() update{{BaseName}}Dto: {{BaseName}}UpdateDto) {
        await this.{{baseName}}Service.update({{primaryColumnsProperty.name}}, update{{BaseName}}Dto);
        return new RDto();
    }
    /**
     * 删除{{documentation}}
     */
    @ApiOperation({ summary: '删除{{documentation}}' })
    @ApiRPrimitiveOfResponse()
    @Delete('/{{baseName}}/remove/:{{primaryColumnsProperty.name}}')
    async remove(@Param('{{primaryColumnsProperty.name}}') {{primaryColumnsProperty.name}}: {{primaryColumnsProperty.type.value}}) {
        await this.{{baseName}}Service.delete({{primaryColumnsProperty.name}});
        return new RDto();
    }
    /**
     * 删除多个{{documentation}}
     */
    @ApiOperation({ summary: '删除多个{{documentation}}' })
    @ApiRPrimitiveOfResponse()
    @Post('/{{baseName}}/removes')
    async removes(@Body() dto: BodyIdsDto) {
        await this.{{baseName}}Service.deletes(dto.ids);
        return new RDto();
    }
}
